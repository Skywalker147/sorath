Sorath Masala Backend Documentation
=================================

Project Structure
----------------
/src
  ├── app.js              # Main application setup, middleware, and route registration
  ├── server.js           # Server initialization and port configuration
  ├── routes/             # API route definitions
  │   ├── auth.routes.js      # Authentication related routes
  │   ├── admin.routes.js     # Admin management routes
  │   ├── item.routes.js      # Item management routes
  │   └── inventory.routes.js # Inventory management routes
  ├── controllers/        # Route controllers
  │   ├── auth.controller.js
  │   ├── admin.controller.js
  │   ├── item.controller.js
  │   └── inventory.controller.js
  ├── models/            # Database models
  │   ├── admin.model.js
  │   ├── item.model.js
  │   └── inventory.model.js
  └── middleware/        # Custom middleware
      └── auth.middleware.js  # Authentication middleware

API Endpoints
------------

1. Authentication Routes (/auth)
   - POST /auth/login
     * Description: Admin login
     * Body: { username, password }
     * Returns: { token, admin }

2. Admin Routes (/admin)
   - GET /admin/profile
     * Description: Get admin profile
     * Headers: Authorization: Bearer <token>
     * Returns: Admin profile data

   - PUT /admin/profile
     * Description: Update admin profile
     * Headers: Authorization: Bearer <token>
     * Body: { name, email, etc. }
     * Returns: Updated admin data

3. Item Routes (/items)
   - GET /items
     * Description: Get all items
     * Headers: Authorization: Bearer <token>
     * Returns: List of all items

   - GET /items/:id
     * Description: Get single item
     * Headers: Authorization: Bearer <token>
     * Returns: Item details

   - POST /items
     * Description: Create new item
     * Headers: Authorization: Bearer <token>
     * Body: { name, description, pricePerGatha, packsPerGatha, initialStock }
     * Returns: Created item data

   - PUT /items/:id
     * Description: Update item
     * Headers: Authorization: Bearer <token>
     * Body: { name, description, pricePerGatha, packsPerGatha }
     * Returns: Updated item data

   - DELETE /items/:id
     * Description: Delete item
     * Headers: Authorization: Bearer <token>
     * Returns: Success message

4. Inventory Routes (/inventory)
   - GET /inventory
     * Description: Get all inventory items
     * Headers: Authorization: Bearer <token>
     * Returns: List of inventory items with stock levels

   - GET /inventory/:id
     * Description: Get single inventory item
     * Headers: Authorization: Bearer <token>
     * Returns: Inventory item details

   - POST /inventory/:id/adjust
     * Description: Adjust inventory stock
     * Headers: Authorization: Bearer <token>
     * Body: { adjustment, reason }
     * Returns: Updated inventory data

   - GET /inventory/history
     * Description: Get inventory history
     * Headers: Authorization: Bearer <token>
     * Query: limit, offset
     * Returns: List of inventory changes

   - GET /inventory/:id/history
     * Description: Get inventory history for specific item
     * Headers: Authorization: Bearer <token>
     * Query: limit, offset
     * Returns: List of inventory changes for the item

Security
--------
- All routes except /auth/login require JWT authentication
- CORS is configured to allow specific origins
- Security headers are implemented for protection against common web vulnerabilities
- Password hashing is implemented for admin authentication

Database Schema
--------------
1. Admin
   - id: UUID
   - username: String
   - password: String (hashed)
   - name: String
   - email: String
   - created_at: Timestamp
   - updated_at: Timestamp

2. Item
   - id: UUID
   - name: String
   - description: String
   - price_per_gatha: Decimal
   - packs_per_gatha: Integer
   - created_at: Timestamp
   - updated_at: Timestamp

3. Inventory
   - id: UUID
   - item_id: UUID (foreign key)
   - current_stock: Integer
   - created_at: Timestamp
   - updated_at: Timestamp

4. Inventory History
   - id: UUID
   - item_id: UUID (foreign key)
   - admin_id: UUID (foreign key)
   - quantity_change: Integer
   - reason: String
   - timestamp: Timestamp

Environment Variables
-------------------
Required environment variables in .env file:
- PORT: Server port (default: 4000)
- JWT_SECRET: Secret key for JWT token generation
- NODE_ENV: Environment (development/production) 